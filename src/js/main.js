//? StrictRegime
'use strict';


//* Preloader
document.addEventListener('DOMContentLoaded', function() {
  const preloader = document.getElementById('preloader');
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞ (5 —Å–µ–∫—É–Ω–¥)
  setTimeout(function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∫ body, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    document.body.classList.add('loaded');
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
    preloader.style.animation = 'fadeOut 1.5s ease forwards';
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(function() {
      preloader.remove();
    }, 1500);
  }, 1000);
});

//! ButtonClick
document.addEventListener("DOMContentLoaded", () => {
    // –ò—â–µ–º —Ç–µ–≥ <audio> –ø–æ ID
    const clickSound = document.getElementById("button-click");
    if (!clickSound) return;

    // üîì –†–∞–∑—Ä–µ—à–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –∑–∞—Ä–∞–Ω–µ–µ "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" –∑–≤—É–∫
    const unlockAudio = () => {
        clickSound.play().then(() => {
            clickSound.pause();
            clickSound.currentTime = 0;
        }).catch(() => {
            // –û—à–∏–±–∫—É –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å Safari/iOS
        });

        // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        document.removeEventListener("touchstart", unlockAudio);
        document.removeEventListener("click", unlockAudio);
    };

    // –ü–µ—Ä–≤—ã–π —Ç–∞–ø –∏–ª–∏ –∫–ª–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–≤—É–∫
    document.addEventListener("touchstart", unlockAudio);
    document.addEventListener("click", unlockAudio);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const buttons = document.querySelectorAll("button");

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥–æ–º—É <button> –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Å–æ –∑–≤—É–∫–æ–º
    buttons.forEach(button => {
        button.addEventListener("click", () => {
            clickSound.currentTime = 0;
            clickSound.play().catch(() => {
                // –û—à–∏–±–∫–∏ –ø—Ä–æ–≥–ª–∞—Ç—ã–≤–∞–µ–º ‚Äî –Ω–µ –º–µ—à–∞—é—Ç —Ä–∞–±–æ—Ç–µ
            });
        });
    });
});

//! QrCode
// document.addEventListener("DOMContentLoaded", () => {
//     // –ù–∞—Ö–æ–¥–∏–º –æ–±—ë—Ä—Ç–∫—É –≤–æ–∫—Ä—É–≥ QR-–∫–æ–¥–∞
//     const qrWrapper = document.getElementById("qrWrapper");

//     // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å–∞–º–æ–º—É QR ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
//     qrWrapper.addEventListener("click", (e) => {
//         e.stopPropagation();
//         qrWrapper.classList.toggle("active");
//     });

//     // –ü—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ QR ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º (—É–±–∏—Ä–∞–µ–º .active)
//     document.addEventListener("click", () => {
//         qrWrapper.classList.remove("active");
//     });
// });

//! MenuToggle
document.addEventListener('DOMContentLoaded', () => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const header = document.querySelector('.header');
  const menuToggle = document.querySelector('.menu-toggle');
  const menuLinks = document.querySelectorAll('.dropdown-menu a'); // –®–ê–ì 3

  // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
  menuToggle.addEventListener('click', () => {
    const isOpening = !header.classList.contains('mobile-open');
    header.classList.toggle('mobile-open');
    
    if (isOpening) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ
  menuLinks.forEach(link => {
    link.addEventListener('click', () => {
      header.classList.remove('mobile-open');
      document.body.style.overflow = '';
    });
  });
});

//! AudioBackground
document.addEventListener('DOMContentLoaded', () => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const audioToggle = document.querySelector('.audio-toggle');
  const audio = document.getElementById('background-audio');
  const audioIcon = audioToggle.querySelector('.audio-icon');

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π
  audioToggle.addEventListener('click', () => {
    const isMuted = audioToggle.dataset.audioState === 'muted';

    if (isMuted) {
      audio.play();
      audioToggle.dataset.audioState = 'playing';
      audioIcon.src = './src/img/svg/playing.svg';
    } else {
      audio.pause();
      audioToggle.dataset.audioState = 'muted';
      audioIcon.src = './src/img/svg/muted.svg';
    }
  });
});

//! DataPrice
document.addEventListener('DOMContentLoaded', () => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const filterButtons = document.querySelectorAll('.filter-btn');
  const orderItems = document.querySelectorAll('.order-item');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {

      // –£–¥–∞–ª—è–µ–º active —Å–æ –≤—Å–µ—Ö
      filterButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');

      const min = parseInt(button.dataset.min);
      const max = parseInt(button.dataset.max);

      orderItems.forEach(item => {
        const price = parseInt(item.dataset.price);
        if (price >= min && price <= max) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  });
});

//! MainImg
document.addEventListener('DOMContentLoaded', () => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const thumbs = document.querySelectorAll('.thumb-item');
  const mainImages = document.querySelectorAll('.main-image');

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏
  thumbs.forEach((thumb, index) => {
    thumb.addEventListener('click', () => {
      // –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
      thumbs.forEach(t => t.classList.remove('active'));
      mainImages.forEach(img => img.classList.remove('active'));

      // –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ
      thumb.classList.add('active');
      mainImages[index].classList.add('active');
    });
  });
});

//! TrustBand
document.addEventListener('DOMContentLoaded', () => {
  const trustCount = document.querySelector('.trust-count');
  const trustProgress = document.querySelector('.trust-progress');

  // –§—É–Ω–∫—Ü–∏—è: –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
  function incrementTrustCount() {
    const current = parseInt(trustCount.textContent);
    const next = current + 1;
    trustCount.textContent = next;

    const percent = Math.min((next / 100) * 100, 100);
    trustProgress.style.width = `${percent}%`;
  }

  // –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
  window.incrementTrustCount = incrementTrustCount;
});

//! ReviewsAdd
document.addEventListener('DOMContentLoaded', () => {
  // === –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã ===
  const form = document.querySelector('.review-form');

  const nameWrapper = form.querySelector('.name-wrapper');
  const nameInput = nameWrapper.querySelector('.review-name');
  const nameStatus = nameWrapper.querySelector('.name-status');

  const phoneWrapper = form.querySelector('.phone-wrapper');
  const phoneInput = phoneWrapper.querySelector('.review-phone');
  const phoneStatus = phoneWrapper.querySelector('.phone-status');

  const messageInput = form.querySelector('.review-message');
  const photoInput = form.querySelector('.review-photo');
  const photoLabel = form.querySelector('.photo-label'); // üîΩ –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç

  const submitBtn = form.querySelector('.submit-review-btn');
  const errorBox = form.querySelector('.submit-error-message');
  const successBox = form.querySelector('.success-message');

  // === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ ===
  messageInput.addEventListener('input', () => {
    const maxChars = 500;

    if (messageInput.value.length > maxChars) {
      messageInput.value = messageInput.value.slice(0, maxChars);
      messageInput.classList.add('overlimit');

      clearTimeout(messageInput._limitTimeout);
      messageInput._limitTimeout = setTimeout(() => {
        messageInput.classList.remove('overlimit');
      }, 300);
    }
  });

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ===
  photoInput.addEventListener('change', () => {
    if (photoInput.files.length > 0) {
      const fileName = photoInput.files[0].name;

      // üîΩ –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–º—è, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      const maxLength = 24;
      let displayName = fileName;
      if (fileName.length > maxLength) {
        const ext = fileName.split('.').pop();
        displayName = fileName.slice(0, maxLength - ext.length - 4) + '...' + ext;
      }

      photoInput.classList.add('uploaded');
      photoLabel.textContent = `üì∏ ${displayName}`;
      form.querySelector('.photo-wrapper')?.classList.add('uploaded');
    } else {
      photoInput.classList.remove('uploaded');
      photoLabel.textContent = 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ';
      form.querySelector('.photo-wrapper')?.classList.remove('uploaded');
    }
  });

  // === –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏ + –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ–ª—é ===
  function showFormError(message, focusElement = null) {
    errorBox.textContent = message;
    errorBox.classList.add('visible');
    submitBtn.classList.add('hidden');

    if (focusElement) {
      focusElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      focusElement.focus();
    }

    clearTimeout(errorBox._timeout);
    errorBox._timeout = setTimeout(() => {
      errorBox.classList.remove('visible');
      submitBtn.classList.remove('hidden');
    }, 3000);
  }

  // === –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===
  function showSuccessMessage(message) {
    successBox.textContent = message;
    successBox.classList.add('visible');
    submitBtn.classList.add('hidden');

    clearTimeout(successBox._timeout);
    successBox._timeout = setTimeout(() => {
      successBox.classList.remove('visible');
      submitBtn.classList.remove('hidden');
    }, 3000);
  }

  // === –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ ===
  nameInput.addEventListener('input', () => {
    let value = nameInput.value;
    value = value.replace(/[^a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]/g, '');
    const parts = value.trimStart().split(' ');
    value = parts.slice(0, 2).join(' ');

    if (value.length > 15) value = value.slice(0, 15);
    nameInput.value = value;

    const spaceCount = (value.match(/\s/g) || []).length;

    if (value.length >= 3 && value.length <= 15 && spaceCount <= 1) {
      nameStatus.textContent = '‚úî';
      nameStatus.classList.add('valid');
      nameStatus.classList.remove('error');
    } else {
      nameStatus.textContent = '‚úñ';
      nameStatus.classList.add('error');
      nameStatus.classList.remove('valid');
    }
  });

  // === –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
  phoneInput.addEventListener('focus', () => {
    if (!phoneInput.value.startsWith('+994')) {
      phoneInput.value = '+994';
    }
  });

  phoneInput.addEventListener('input', () => {
    let digits = phoneInput.value.replace(/\D/g, '');
    if (!digits.startsWith('994')) digits = '994';
    digits = digits.slice(0, 12);
    phoneInput.value = '+' + digits;

    if (digits.length === 12) {
      phoneStatus.textContent = '‚úî';
      phoneStatus.classList.add('valid');
      phoneStatus.classList.remove('error');
    } else {
      phoneStatus.textContent = '‚úñ';
      phoneStatus.classList.add('error');
      phoneStatus.classList.remove('valid');
    }
  });

  // === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ ===
  submitBtn.addEventListener('click', () => {
    const name = nameInput.value.trim();
    const phone = phoneInput.value.trim();
    const message = messageInput.value.trim();
    const photoFile = photoInput.files[0];
    const digits = phone.replace(/\D/g, '');
    const spaceCount = (name.match(/\s/g) || []).length;

    if (!name.replace(/\s/g, '')) {
      showFormError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è', nameInput);
      return;
    }
    if (name.length < 3 || name.length > 15 || spaceCount > 1) {
      showFormError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', nameInput);
      return;
    }
    if (digits.length !== 12 || !digits.startsWith('994')) {
      showFormError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä', phoneInput);
      return;
    }
    if (!message) {
      showFormError('–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤', messageInput);
      return;
    }

    const newReview = document.createElement('div');
    newReview.classList.add('reviews-item');

    const safe = (text) => {
      const el = document.createElement('div');
      el.textContent = text;
      return el.innerHTML;
    };

    submitBtn.disabled = true;

    if (photoFile) {
      const reader = new FileReader();
      reader.onload = function (e) {
        insertReviewHTML(e.target.result);
        submitBtn.disabled = false;
      };
      reader.readAsDataURL(photoFile);
    } else {
      insertReviewHTML(null);
      submitBtn.disabled = false;
    }

    function insertReviewHTML(photoURL) {
      const now = new Date().toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });

      newReview.innerHTML = `
        <div class="review-block">
          <span class="review-date">${now}</span>
          <h3 class="reviews-item-title">–ò–º—è: <strong>${safe(name)}</strong></h3>
          <p class="reviews-item-phone">–ù–æ–º–µ—Ä: <strong>${safe(phone)}</strong></p>
          <p class="reviews-item-desc">–û—Ç–∑—ã–≤ –Ω–∞—à–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: <strong>${safe(message)}</strong></p>
          ${photoURL ? `<img src="${photoURL}" alt="–§–æ—Ç–æ –æ—Ç–∑—ã–≤–∞" class="review-photo-thumb">` : ''}
        </div>
      `;

      form.after(newReview);

      // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π
      nameInput.value = '';
      phoneInput.value = '';
      messageInput.value = '';
      photoInput.value = '';
      nameStatus.textContent = '';
      phoneStatus.textContent = '';
      nameStatus.classList.remove('valid', 'error');
      phoneStatus.classList.remove('valid', 'error');
      photoLabel.textContent = 'üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ';
      form.querySelector('.photo-wrapper')?.classList.remove('uploaded');

      if (typeof incrementTrustCount === 'function') {
        incrementTrustCount();
      }

      showSuccessMessage('–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéâ');
    }
  });
});


//! CartLogic
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage 
const cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
document.addEventListener('DOMContentLoaded', () => {
  // –≠–ª–µ–º–µ–Ω—Ç—ã
  const cartToggle = document.querySelector('.cart-toggle');
  const cartCount = cartToggle.querySelector('.cart-count');
  const cartModal = document.querySelector('.cart-modal');
  const cartItemsList = document.querySelector('.cart-items-list');
  const cartClearBtn = document.querySelector('.cart-clear-btn');
  const cartSendBtn = document.querySelector('.cart-send-btn');
  const cartTotalDisplay = document.querySelector('.cart-total');
  const orderItems = document.querySelectorAll('.order-item');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
  function saveCartToStorage() {
    localStorage.setItem('cartItems', JSON.stringify(cartItems));
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  function updateCartCount() {
    const total = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = total;
    cartToggle.dataset.cartCount = total;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    if (total > 0) {
        cartToggle.style.opacity = '1';
        cartToggle.style.pointerEvents = 'auto';
    } else {
        cartToggle.style.opacity = '0';
        cartToggle.style.pointerEvents = 'none';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
  function updateCartTotal() {
    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    cartTotalDisplay.textContent = `–ò—Ç–æ–≥–æ: ${total} ‚Çº`;
  }

  // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—ã
  function showCartMessage(text) {
    cartItemsList.innerHTML = `<p class="cart-empty-text">${text}</p>`;
    cartTotalDisplay.textContent = `–ò—Ç–æ–≥–æ: 0 ‚Çº`;
  }

  // –†–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  function renderCartItems() {
    cartItemsList.innerHTML = '';

    if (cartItems.length === 0) {
      showCartMessage('–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞');
      return;
    }

    cartItems.forEach((item, index) => {
      const html = `
        <div class="cart-item">
          <div class="cart-item-img" style="background-image: url('${item.image}')"></div>
          <div class="cart-item-info">
            <h3 class="cart-item-title">${item.title}</h3>
            <p class="cart-item-desc">${item.desc}</p>
            <p class="cart-item-price">${item.price} ‚Çº</p>
            <div class="cart-item-quantity">
              <button class="quantity-decrease" data-index="${index}">‚Äì</button>
              <span>${item.quantity}</span>
              <button class="quantity-increase" data-index="${index}">+</button>
            </div>
          </div>
        </div>
      `;
      cartItemsList.insertAdjacentHTML('beforeend', html);
    });

    updateCartTotal();
    saveCartToStorage();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  orderItems.forEach(item => {
    const addBtn = item.querySelector('.order-item-btn');
    addBtn.addEventListener('click', () => {
      const title = item.querySelector('.order-item-title')?.textContent.trim();
      const desc = item.querySelector('.order-item-desc')?.textContent.trim();
      const price = parseInt(item.dataset.price);
      const image = item.querySelector('.order-item-img')?.style.backgroundImage
        ?.replace(/^url\(["']?/, '')
        ?.replace(/["']?\)$/, '');

      const existing = cartItems.find(el => el.title === title);
      if (existing) {
        existing.quantity += 1;
      } else {
        cartItems.push({ title, desc, price, image, quantity: 1 });
      }

      updateCartCount();
      renderCartItems();

      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—ë—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
      const img = item.querySelector('.order-item-img');
      if (img) {
        const clone = img.cloneNode(true);
        const rect = img.getBoundingClientRect();
        const cartIcon = document.querySelector('.cart-toggle');

        clone.classList.add('fly-to-cart');
        document.body.appendChild(clone);

        clone.style.width = rect.width + 'px';
        clone.style.height = rect.height + 'px';
        clone.style.left = rect.left + 'px';
        clone.style.top = rect.top + 'px';

        const cartRect = cartIcon.getBoundingClientRect();
        const cartCenterX = cartRect.left + cartRect.width / 2;
        const cartCenterY = cartRect.top + cartRect.height / 2;
        const imgCenterX = rect.left + rect.width / 2;
        const imgCenterY = rect.top + rect.height / 2;
        const deltaX = cartCenterX - imgCenterX;
        const deltaY = cartCenterY - imgCenterY;

        requestAnimationFrame(() => {
            clone.style.transform = `translate(${deltaX}px, ${deltaY}px) scale(0.2) rotate(1turn)`;
            clone.style.opacity = '0';
        });

        setTimeout(() => {
            clone.remove();
        }, 800);
      }
    });
  });

// –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ –∫–æ—Ä–∑–∏–Ω—ã
  cartToggle.addEventListener('click', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º, –∏–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
    if (cartModal.classList.contains('visible')) {
        cartModal.classList.remove('visible');
    } else {
        cartModal.classList.add('visible');
    }
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Ñ–æ–Ω—É
  cartModal.addEventListener('click', e => {
    if (e.target === cartModal) {
        cartModal.classList.remove('visible');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ +/- –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  cartItemsList.addEventListener('click', e => {
    const index = parseInt(e.target.dataset.index);
    if (isNaN(index)) return;

    if (e.target.classList.contains('quantity-increase')) {
      cartItems[index].quantity += 1;
    }

    if (e.target.classList.contains('quantity-decrease')) {
      cartItems[index].quantity -= 1;
      if (cartItems[index].quantity <= 0) {
        cartItems.splice(index, 1);
      }
    }

    updateCartCount();
    renderCartItems();
    saveCartToStorage();
  });

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
  cartClearBtn.addEventListener('click', () => {
    cartItems.length = 0;
    updateCartCount();
    renderCartItems();
    saveCartToStorage();
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ WhatsApp
  cartSendBtn.addEventListener('click', () => {
    if (cartItems.length === 0) {
      showCartMessage('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
      return;
    }

    const message = cartItems.map(item =>
      `‚Ä¢ ${item.title} ‚Äî ${item.quantity} —à—Ç. (${item.price * item.quantity} ‚Çº)`
    ).join('%0A');

    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

    const fullMessage = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ö–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å:%0A${message}%0A%0A–û–±—â–∞—è —Å—É–º–º–∞: ${total} ‚Çº`;

    window.open(`https://wa.me/994709690901?text=${fullMessage}`, '_blank');
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  updateCartCount();
  renderCartItems();
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ—ë –∏ –∏–∫–æ–Ω–∫–∏
  document.addEventListener('click', (e) => {
    const cart = document.querySelector('.cart-modal');
    const cartContent = document.querySelector('.cart-modal-content');
    const toggle = document.querySelector('.cart-toggle');

    const isCartOpen = cart.classList.contains('visible');
    const clickedInsideCart = cartContent.contains(e.target);
    const clickedToggle = toggle.contains(e.target);
    const isQuantityButton = e.target.classList.contains('quantity-decrease') || e.target.classList.contains('quantity-increase');

    if (isCartOpen && !clickedInsideCart && !clickedToggle && !isQuantityButton) {
      cart.classList.remove('visible');
    }
  });
});
